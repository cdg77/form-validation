#!/usr/bin/env node
'use strict';

var childProcess    = require('child_process'),
    exec            = childProcess.execSync,
    chalk           = require('chalk'),
    children        = [],
    spawn           = childProcess.spawn,
    stopped         = false;

process.on('SIGINT' , cleanExit); // catch ctrl-c
process.on('SIGTERM', cleanExit); // catch kill
process.on('exit'   , cleanExit);

runCommands([
    ['bin/installDeps'              ,
        '> Ensure dependencies'],
    ['bin/sass'                     ,
        '> Run sass once'],
    ['watch bin/sass client/scss'   ,
        '> start sass watch'        ,
        { async: true }],
    ['watchify -o client/example-jquery/bundle.js -v -d client/example-jquery/scripts.js'   ,
        '> start watchify jquery'        ,
        { async: true }],
    ['watchify -o client/example-vanilla-javascript/bundle.js -v -d client/example-vanilla-javascript/scripts.js'   ,
        '> start watchify vanilla javascript'        ,
        { async: true }],
    ['watchify -o client/example-polymer/bundle.js -v -d client/example-polymer/scripts.js'   ,
        '> start watchify polymer'        ,
        { async: true }],
    ['watchify -o client/example-solid-stack/bundle.js -v -d client/example-solid-stack/scripts.js'   ,
        '> start watchify solid stack'        ,
        { async: true }],
    ['nodemon server --ignore client/ --ignore node_modules/',
        '> start nodemon server']
]);

function runCommands(commands) {
    commands.forEach(function(commandInfo) {
        var command = commandInfo[0],
            comment = commandInfo[1],
            options = commandInfo[2];

        comment && console.log(chalk.green(comment));
        if (options && options.async) {
            execBg(command);
        } else {
            exec(command, { stdio: 'inherit' });
        }
    });
}

function execBg(command) {

    command = command.split(' ');
    var args = command.splice(1);
    console.log(chalk.blue('bg command:', command[0], ' args:', args));
    var child;

    try {
        child = spawn(command[0], args, { stdio : 'inherit' });
        children.push(child);
    } catch(e) {
        console.log(chalk.red('error'), e);
    }
}

function cleanExit() {
    var count = 0;
    if (stopped) {
        return;
    }
    console.log(chalk.blue('exiting'));
    children.forEach(function(child) {
        console.log(chalk.blue(`Stopping: ${++count}`));
        child.kill();
    });
    stopped = true;
    process.exit();
}
